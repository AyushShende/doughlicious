// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  Cart          Cart[]
  Address       Address[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

model Pizza {
  id          String      @id @default(cuid())
  title       String      @unique
  image       String
  description String
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

enum OrderStatus {
  Placed
  Preparing
  OutForDelivery
  Completed
}

model Order {
  id          String      @id @default(cuid())
  totalValue  Float
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  orderItems  OrderItem[]
  orderStatus OrderStatus
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  pizzaId  String
  pizza    Pizza  @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  quantity Int
  size     Size
  price    Float
}

model Cart {
  id        String     @id @default(cuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  pizzaId   String
  pizza     Pizza    @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
  quantity  Int
  size      Size
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id      String  @id @default(cuid())
  street  String
  city    String
  country String
  zipCode String
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique
  Order   Order[]
}
