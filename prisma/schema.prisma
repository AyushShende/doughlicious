// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
  // User has many orders
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pizza {
  id          String   @id @default(cuid())
  title       String   @unique
  image       String
  description String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //single pizza can be a part of multiple orders
  orderItems OrderItem[]
}

model Order {
  id              String      @id @default(cuid())
  deliveryAddress String?
  totalValue      Int?
  // Order belongs to only one user
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  // Order has many orderitems
  orderItems      OrderItem[]
  orderStatus     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

model OrderItem {
  id       String @id @default(cuid())
  // OrderItem belongs to one Order and one Pizza
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  pizzaId  String
  pizza    Pizza  @relation(fields: [pizzaId], references: [id])
  quantity Int
  size     Size
}
